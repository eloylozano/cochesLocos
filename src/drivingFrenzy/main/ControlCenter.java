package drivingFrenzy.main;import java.io.IOException;import java.util.Random;import drivingFrenzy.race.Section;import drivingFrenzy.race.StandardIndoorSection;import drivingFrenzy.race.StandardOutdoorSection;import drivingFrenzy.race.Track;import drivingFrenzy.vehicles.Kart;import drivingFrenzy.vehicles.Scooter;import drivingFrenzy.vehicles.Vehicle;/** * @author ismael This is the Control Center. It is the entry point of the * application, where the races are created, vehicles are added... */public class ControlCenter {    private final static String USAGE = "El programa genera un numero aleatorio de vehiculos y secciones de pista y realiza la carrera. \n" + "El programa automaticamente para tras imprimir una linea, esperando a que el usuario pulse enter para continuar.";    /**     * @param minSections     * @param maxSections     * @param minVehicles     * @param maxVehicles     * @param minVehicleSpeed     * @param maxVehicleSpeed     * @param minSectionLenght     * @param maxSectionLength     * @param minSectionSpeed     * @param maxSectionSpeed     * @throws IOException This method creates simple race with StandarIndoorSection sections     *                     and Scooters, with initial random stats     */    private static void simpleRandomRace(int minSections, int maxSections, int minVehicles, int maxVehicles, int minVehicleSpeed, int maxVehicleSpeed, int minSectionLenght, int maxSectionLength, int minSectionSpeed, int maxSectionSpeed) throws IOException {        // We will need a variable to return random numbers to generate the initial        // conditions.        Random random = new Random();        // first, we randomly decide on the race conditions.        int numberOfSections = random.nextInt(minSections, maxSections + 1);        int numberOfVehicles = random.nextInt(minVehicles, maxVehicles + 1);        // next, we create the track.        Section[] sections = new Section[numberOfSections];        for (int i = 0; i < numberOfSections; i++) {            sections[i] = new StandardIndoorSection(random.nextInt(minSectionLenght, maxSectionLength + 1), "una recta sencilla", random.nextInt(minSectionSpeed, maxSectionSpeed + 1));        }        Track track = new Track(sections);        // Next, we create some vehicles        Vehicle[] vehicles = new Vehicle[numberOfVehicles];        for (int i = 0; i < numberOfVehicles; i++) {            vehicles[i] = new Scooter(i, "un conductor anonimo", 0, random.nextInt(minVehicleSpeed, maxVehicleSpeed), "scooter");        }        start(track, vehicles);    }    private static void defaultRace(int sections, int vehicles) throws IOException {        Section[] sectionDefaultRace = new Section[sections];        sectionDefaultRace[0] = new StandardIndoorSection(1000, "Recta", 100);        sectionDefaultRace[1] = new StandardIndoorSection(2000, "Curva a derecha", 40);        sectionDefaultRace[2] = new StandardIndoorSection(3000, "Recta rápida", 120);        sectionDefaultRace[3] = new StandardIndoorSection(2000, "Curva abierta a derecha", 90);        sectionDefaultRace[4] = new StandardIndoorSection(1000, "Curva cerrada a derecha", 20);        Track track = new Track(sectionDefaultRace);        Vehicle[] vehiclesDefaultRace = new Vehicle[vehicles];        vehiclesDefaultRace[0] = new Scooter(1, "Novato", 0, 80, "Scooter");        vehiclesDefaultRace[1] = new Scooter(2, "Profesional", 0, 100, "Scooter");        vehiclesDefaultRace[2] = new Scooter(3, "Experto", 0, 140, "Scooter");        start(track, vehiclesDefaultRace);    }    private static void kartsRace(int sections, int vehicles) throws IOException {        Section[] sectionKartsRace = new Section[sections];        sectionKartsRace[0] = new StandardIndoorSection(1000, "Recta", 100);        sectionKartsRace[1] = new StandardIndoorSection(2000, "Curva a derecha", 40);        sectionKartsRace[2] = new StandardIndoorSection(3000, "Recta rápida", 120);        sectionKartsRace[3] = new StandardIndoorSection(2000, "Curva abierta a derecha", 90);        sectionKartsRace[4] = new StandardIndoorSection(1000, "Curva cerrada a derecha", 20);        Track track = new Track(sectionKartsRace);        Vehicle[] vehiclesKartsRace = new Vehicle[vehicles];        vehiclesKartsRace[0] = new Kart(1, "Novato", 0, 80, "Kart",1,10, 30,40,90);        vehiclesKartsRace[1] = new Kart(2, "Profesional", 0, 100, "Kart",1,14, 40, 34,100);        vehiclesKartsRace[2] = new Kart(3, "Experto", 0, 140, "Kart",1,20,40,30,90);        start(track, vehiclesKartsRace);    }    private static void inclusiveRace(int sections, int vehicles) throws IOException {        Section[] sectionInclusiveRace = new Section[sections];        sectionInclusiveRace[0] = new StandardIndoorSection(1000, "Recta", 100);        sectionInclusiveRace[1] = new StandardIndoorSection(2000, "Curva a derecha", 40);        sectionInclusiveRace[2] = new StandardIndoorSection(3000, "Recta rápida", 120);        sectionInclusiveRace[3] = new StandardIndoorSection(2000, "Curva abierta a derecha", 90);        sectionInclusiveRace[4] = new StandardIndoorSection(1000, "Curva cerrada a derecha", 20);        Track track = new Track(sectionInclusiveRace);        Vehicle[] vehiclesInclusiveRace = new Vehicle[vehicles];        vehiclesInclusiveRace[0] = new Kart(1, "De La Rosa", 0, 80, "Kart Ferrari",1,10, 30,40,92);        vehiclesInclusiveRace[1] = new Kart(2, "Webber", 0, 100, "Kart Lotus",1,14, 40, 34,95);        vehiclesInclusiveRace[2] = new Kart(3, "Massa", 0, 140, "Kart BMW",1,20,37,30,80);        vehiclesInclusiveRace[3] = new Scooter(4,"Petrucci",0,86,"Scooter Honda");        vehiclesInclusiveRace[4] = new Scooter(5,"Stoner",0,93,"Scooter Ducati");        vehiclesInclusiveRace[5] = new Scooter(6,"Doohan",0,85,"Scooter Aprillia");        start(track, vehiclesInclusiveRace);    }    private static void inclusiveOutdoorRace(int sections, int vehicles) throws IOException {        Section[] sectionInclusiveOutdoorRace = new Section[sections];        sectionInclusiveOutdoorRace[0] = new StandardOutdoorSection(1000, "Recta mojada (70% de la velocidad teórica)", 95,"Rainy", 1);        sectionInclusiveOutdoorRace[1] = new StandardOutdoorSection(2000, "Curva a derecha seca (110% de la velocidad teórica)", 40,"Normal", 1);        sectionInclusiveOutdoorRace[2] = new StandardOutdoorSection(3000, "Recta rápida nublada (90% de la velocidad teórica)", 120,"Sunny", 1);        sectionInclusiveOutdoorRace[3] = new StandardOutdoorSection(2000, "Curva abierta a derecha seca (110% de la velocidad teórica)", 80,"Rainy", 1);        sectionInclusiveOutdoorRace[4] = new StandardOutdoorSection(1000, "Curva cerrada a derecha mojada (70% de la velocidad teórica)", 20,"Normal", 1);        Track track = new Track(sectionInclusiveOutdoorRace);        Vehicle[] vehiclesInclusiveOutdoorRace = new Vehicle[vehicles];        vehiclesInclusiveOutdoorRace[0] = new Kart(1, "De La Rosa", 0, 80, "Kart Ferrari",1,10, 45,40,102);        vehiclesInclusiveOutdoorRace[1] = new Kart(2, "Webber", 0, 100, "Kart Lotus",1,14, 40, 34,95);        vehiclesInclusiveOutdoorRace[2] = new Kart(3, "Massa", 0, 140, "Kart BMW",1,20,37,30,80);        vehiclesInclusiveOutdoorRace[3] = new Scooter(4,"Petrucci",0,86,"Scooter Honda");        vehiclesInclusiveOutdoorRace[4] = new Scooter(5,"Stoner",0,93,"Scooter Ducati");        vehiclesInclusiveOutdoorRace[5] = new Scooter(6,"Doohan",0,85,"Scooter Aprillia");        start(track, vehiclesInclusiveOutdoorRace);    }    /**     * This method receives a track and a list of cars and it starts a race, showing the results in command line.     *     * @throws IOException     */    private static void start(Track track, Vehicle[] vehicles) throws IOException {        // At the end, who won the race? We should re-order the results. TODO.        // We will track the total time per vehicle in an array matching positions. However, this should be done differently, with proper Java Objects.        double[] times = new double[vehicles.length];        // NOW WE START THE RACE!!!! We have to get the times for each vehicle per        // section, and then the total time.        nextComment("Bienvenidos a la carrera simple en linea recta indoor. Hoy tenemos algunas scooters tratando de realizar el trayecto lo mas rapido posible!");        nextComment("Comencemos con alguna informacion sobre la pista:");        nextComment(track.getDescription());        nextComment("Tenemos hoy " + vehicles.length + " competidores: ");        for (Vehicle vehicle : vehicles) {            nextComment("Con el numero " + vehicle.getNumber() + " tenemos un " + vehicle.getDescription() + " pilotado por " + vehicle.getDriver() + ". Este vehiculo alcanza una velocidad maxima de " + vehicle.getMaxSpeed() + " km/h");        }        nextComment("Comienza la carrera!");        for (int i = 0; i < vehicles.length; i++) {            Vehicle vehicle = vehicles[i];            // for each vehicle, we want to track its total time.            int currentSectionPosition = 1;            double totalTime = 0;            nextComment("El siguiente piloto es " + vehicle.getDriver() + " con el numero " + vehicle.getNumber() + ". Se prepara para salir!");            for (Section section : track.getSections()) {                nextComment("\tEl siguiente tramo es el numero " + currentSectionPosition + ", " + section.getDescription() + " de " + section.getLength() + " metros de longitud, con una velocidad maxima permitida de " + section.getTheoreticalMaxSpeed() + "km/h");                // The driver modifies the speed based on the section about to enter                String action = vehicle.adaptSpeed(section);                double secondsThisSection = section.getLength() / (vehicle.getCurrentSpeed() * 1d / 1000 * 3600);                nextComment("\t" + action);                nextComment("\tPasa la seccion en " + secondsThisSection + " segundos.");                totalTime += secondsThisSection;                nextComment("\tSu tiempo total tras el tramo " + currentSectionPosition + " es de " + timeTo2Decimals(totalTime) + " segundos");                currentSectionPosition++;            }            nextComment("\tFinaliza el recorrido! Su tiempo total es de " + timeTo2Decimals(totalTime) + " segundos.");            times[i] = totalTime;        }        // MODIFY THIS to show the results sorted by total time.        nextComment("Y acaba la carrera! Los tiempos de los pilotos son: ");        for (int i = 0; i < times.length - 1; i++) {            for (int j = 0; j < times.length - i - 1; j++) {                if (times[j] > times[j + 1]) {                    // Creates temporal variable how saves temporally the times to sort                    double temp = times[j];                    times[j] = times[j + 1];                    times[j + 1] = temp;                    // If this not exists, times only changes between vehicles                    Vehicle tempVehicle = vehicles[j];                    vehicles[j] = vehicles[j + 1];                    vehicles[j + 1] = tempVehicle;                }            }        }        for (int i = 0; i < vehicles.length; i++) {            Vehicle vehicle = vehicles[i];            nextComment("\t" + vehicle.getDriver() + " con el numero " + vehicle.getNumber() + " ha hecho un tiempo de " + timeTo2Decimals(times[i]) + " segundos.");        }    }    private static String timeTo2Decimals(double time) {        return 0.01 * Math.round(time * 100) + "";    }    public static void main(String[] args) throws IOException {        System.out.println(USAGE);        // simpleRandomRace(50, 100, 2, 5, 40, 150, 500, 2000, 70, 150);        //defaultRace(5, 3);        // kartsRace(5,3);        // inclusiveRace(5,6);        inclusiveOutdoorRace(5,6);    }    /*     * This method is just used as a convenience method to print a comment and await     * for the user to click enter to go to the next comment.     */    private static void nextComment(String comment) throws IOException {        System.out.println(comment);//		System.in.read();    }}